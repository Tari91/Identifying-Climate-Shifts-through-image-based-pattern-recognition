import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# 1. Generate synthetic climate images
def generate_climate_image(climate_type, size=(64, 64)):
    """Generates a synthetic image representing a specific climate pattern."""
    img = np.zeros(size)
    if climate_type == "el_nino":
        x, y = np.meshgrid(np.linspace(-1, 1, size[0]), np.linspace(-1, 1, size[1]))
        img = np.exp(-(x**2 + y**2)) + 0.1 * np.random.randn(*size)
    elif climate_type == "la_nina":
        img = np.sin(np.linspace(0, 10, size[0]))[:, None] * np.cos(np.linspace(0, 10, size[1])) + 0.1 * np.random.randn(*size)
    else:  # neutral
        img = 0.5 * np.random.randn(*size)
    return (img - np.min(img)) / (np.max(img) - np.min(img))  # normalize

# 2. Create dataset
def create_dataset(n_per_class=500):
    classes = ['el_nino', 'la_nina', 'neutral']
    X, y = [], []
    for idx, cls in enumerate(classes):
        for _ in range(n_per_class):
            img = generate_climate_image(cls)
            X.append(img)
            y.append(idx)
    return np.array(X), np.array(y)

X, y = create_dataset()
X = X[..., np.newaxis]  # Add channel dimension

# 3. Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Define CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 1)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(3, activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.summary()

# 5. Train model
history = model.fit(X_train, y_train, epochs=10, validation_split=0.2)

# 6. Evaluate
test_loss, test_acc = model.evaluate(X_test, y_test)
print("Test Accuracy:", test_acc)

# Classification report
y_pred = model.predict(X_test).argmax(axis=1)
print(classification_report(y_test, y_pred, target_names=['el_nino', 'la_nina', 'neutral']))

# 7. Plot sample predictions
def show_sample_predictions(n=5):
    plt.figure(figsize=(12, 3))
    for i in range(n):
        idx = np.random.randint(0, len(X_test))
        pred_label = y_pred[idx]
        true_label = y_test[idx]
        plt.subplot(1, n, i+1)
        plt.imshow(X_test[idx].squeeze(), cmap='viridis')
        plt.title(f'True: {true_label}, Pred: {pred_label}')
        plt.axis('off')
    plt.tight_layout()
    plt.show()

show_sample_predictions()
